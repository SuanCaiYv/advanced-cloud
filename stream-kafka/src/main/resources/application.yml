server:
  port: 9890
spring:
  cloud:
    stream:
      function:
        # f1|f2表示连接两个函数进行处理
        definition: input1;output1;input2;function1;input3;function1|function2;function3;function4;input4;input5;input6;input7
      kafka:
        binder:
          brokers: 127.0.0.1:9093
          auto-create-topics: true
      bindings:
        # 输入
        input1-in-0:
          destination: test_topic1
          group: my_group1
        input2-in-0:
          destination: test_topic1
          group: my_group2
        function1-in-0:
          destination: test_topic1
          group: my_group3
        function1|function2-in-0:
          destination: test_topic1
          group: my_group4
        function4-in-0:
          destination: test_topic1
          group: my_group5
        input6-in-0:
          destination: test_topic7
          group: my_group6
        input7-in-0:
          destination: test_topic7
          group: my_group6
        input3-in-0:
          destination: test_topic2
          group: my_group1
        # 既然是多输入，那么就需要配置多个In Binding
        function3-in-0:
          destination: test_topic3
          group: my_group1
          # 多输入可能类型不一致，这里需要指出，否则无法接收
          content-type: text/plain
        function3-in-1:
          destination: test_topic4
          group: my_group1
          content-type: text/plain
        input4-in-0:
          destination: test_topic5
          group: my_group1
          content-type: text/plain
        input5-in-0:
          destination: test_topic6
          group: my_group1
          content-type: text/plain
        # ---------------分割线----------------
        # 输出
        source1-out-0:
          destination: test_topic1
        source1-out-1:
          destination: test_topic7
          partitionCount: 5
          producer:
            partitionKeyExtractorName: myPartitionKeyExtractorStrategy
            partitionSelectorName: myPartitionSelectorStrategy
        output1-out-0:
          destination: test_topic1
        function1-out-0:
          destination: test_topic2
        # 如果需要连接函数，记得这么设置binding
        function1|function2-out-0:
          destination: test_topic2
        function3-out-0:
          destination: test_topic2
        function4-out-0:
          destination: test_topic5
          content-type: text/plain
        function4-out-1:
          destination: test_topic6
          content-type: text/plain
      poller:
        fixed-delay: 1000
      # 此时会自动解析为名为source1-out-x的bindings，可能有很多个binding，会匹配名称和streamBridge的bindingName一样的binding
      source: source1
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://127.0.0.1:9190/eureka
logging:
  level: debug
